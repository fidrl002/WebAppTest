@model SelectList
@{
    ViewBag.Title = "Annual Sales";
}

<h2 style="text-align: center">AnnualSalesReport.cshtml</h2>

<div class="row mb-3">
    <div class="col-2">
        <select name="year" asp-items="@Model" class="form-control">
            <option value="">Select...</option>
        </select>
    </div>
</div>

<div>
    <svg id="Graph" width="100%" height="400px" class="border border-primary rounded p-2">
        <g>

        </g>
    </svg>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        // select svg element
        var svg = d3.select("svg");
        
        // determine size of the svg element
        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        console.log('Width: ' + w);
        console.log('Height: ' + h);

        // chart margins
        const chartMargins = {
            left: 40,
            right: 25,
            top: 25,
            bottom: 80
        };

        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // d3 listener on select
        d3.select('[name="year"]').on('change', (e) => {
            var year = e.target.value;
            console.log(year);
            if (year.length > 0) {
                fetch(`/Reports/AnnualSalesReportData?Year=${year}`)
                .then(response => {
                    console.log("response status: " + response.status);
                    console.log("response text: " + response.statusText);
                    return response.json();
                })
                .then(data => buildGraph(data))
                .catch(err => console.log(err.message));
            }
        });

        // build visual graph with data
        function buildGraph(dataSet) {
            console.log(dataSet);

            // calculate the max value to be displayed
            let totalItemsRange = d3.extent(dataSet, (d, i) => d.totalItems);
            let maxTotalItems = totalItemsRange[1];

            console.log("Max totalItems: " + maxTotalItems);

            // create yScale
            let yScale = d3.scaleLinear()
                .domain([0, maxTotalItems])
                .range([h, 0]);

            // create xScale
            let monthArray = Array.from(dataSet, (d, i) => d.monthName);
            console.log("array: " + monthArray);

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w])
                .paddingInner(0.1);

            console.log("xscale: " + xScale('March'));

            // removes old bars
            svg.selectAll("g")
                .remove();
            
            // create chartGroup element containing all barGroups as rectangles
            const chartGroup = svg.append("g")
                .classed("chartGroup", true)
                .attr("transform", `translate(${chartMargins.left},${chartMargins.top})`);

            // select all "g" elements and bind the dataSet
            let barGroups = chartGroup
                .selectAll("g")
                .data(dataSet);

            // add new bar groups
            let newBarGroups = barGroups.enter()
                .append("g")
                .attr("transform", (d, i) => {
                    return `translate(${xScale(d.monthName)}, ${yScale(d.totalItems)})`; // returns transform="translate(x,y)"
                });

            // append new rectangles (with yScale and xScale)
            newBarGroups.append("rect")
                .attr("x", 0) // optional, 0 is default
                .attr("y", (d, i) => { return h - yScale(d.totalItems); })
                .attr("height", 0) // set initial height to 0
                .attr("width", xScale.bandwidth())
                .attr("fill", "transparent")
                .transition()
                .duration((d, i) => i * 150)
                .delay((d, i) => i + 100)
                .attr("y", 0)
                .attr("height", (d, i) => { return h - yScale(d.totalItems); })
                .style("fill", (d, i) => { return `hsl(200, 100%, ${(100 - (d.totalItems / maxTotalItems * 80))}%)`});

            // add text
            newBarGroups.append("text")
                .attr("text-anchor", "middle")
                .attr("x", (d, i) => { return xScale.bandwidth() / 2}) // center text in the bar
                .attr("y", "20")
                .attr("fill", "white")
                .style("font-size", "1em")
                .text((d, i) => d.totalItems.toLocaleString());

            // Create yAxis and add to the svg
            let yAxis = d3.axisLeft(yScale); // declare axis generator
            chartGroup.append("g") // append yAxis to chartGroup
                .classed("axis y", true)
                .call(yAxis);

            // Create and append xAxis
            let xAxis = d3.axisBottom(xScale);
            chartGroup.append("g")
                .classed("axis x", true)
                .attr("transform", `translate(0,${h})`)
                .call(xAxis);

            chartGroup.selectAll(".axis.x text")
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.8em")
                .attr("dy", "0.25em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "0.9em"); // set font size

        };

    </script>
}